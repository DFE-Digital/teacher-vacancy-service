name: Deploy

on:
  push:
    branches:
      - master

env:
 DOCKERHUB_REPOSITORY: dfedigital/teaching-vacancies

jobs:
  deploy:
    name: build docker image and deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout Code

    - name: build and push docker image
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKERHUB_REPOSITORY }}
        tags: ${{ github.sha }}
        target: production

    - name: Install cf client
      env:
        CF_CLI_VERSION: 7.0.0-beta.30
      run: |
        curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=${CF_CLI_VERSION}" | tar -zx -C /tmp
        sudo cp /tmp/cf7 /usr/local/bin/cf7

    - name: Deploy to staging
      env:
        CF_API_ENDPOINT: ${{ secrets.CF_API_ENDPOINT }}
        CF_USERNAME: ${{ secrets.CF_USERNAME }}
        CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
        CF_ORG: ${{ secrets.CF_ORG }}
        CF_SPACE: ${{ secrets.CF_STAGING_SPACE }}
      run: |
        cf7 api $CF_API_ENDPOINT
        cf7 auth
        cf7 target -o $CF_ORG -s $CF_SPACE
        cf7 push --strategy rolling -f paas/web/manifest-docker-staging.yml --var IMAGE_NAME=$DOCKERHUB_REPOSITORY:$GITHUB_SHA
        cf7 push -f paas/worker/manifest-docker-staging.yml --var IMAGE_NAME=$DOCKERHUB_REPOSITORY:$GITHUB_SHA

    - name: Deploy to production
      if: github.ref == 'refs/heads/master'
      env:
        CF_API_ENDPOINT: ${{ secrets.CF_API_ENDPOINT }}
        CF_USERNAME: ${{ secrets.CF_USERNAME }}
        CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
        CF_ORG: ${{ secrets.CF_ORG }}
        CF_SPACE: ${{ secrets.CF_SPACE }}
      run: |
        cf7 api $CF_API_ENDPOINT
        cf7 auth
        cf7 target -o $CF_ORG -s $CF_SPACE
        cf7 push --strategy rolling -f paas/web/manifest-docker-production.yml --var IMAGE_NAME=$DOCKERHUB_REPOSITORY:$GITHUB_SHA
        cf7 push -f paas/worker/manifest-docker-production.yml --var IMAGE_NAME=$DOCKERHUB_REPOSITORY:$GITHUB_SHA

  notify:
    needs: deploy
    name: Slack notification
    runs-on: ubuntu-latest
    steps:
      - name: Send slack message to twd_tv_dev channel
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_CHANNEL: twd_tv_dev
          SLACK_USERNAME: CI Deployment
          SLACK_ICON_EMOJI: ':tada:'
          SLACK_TITLE: Successful deployment
          SLACK_MESSAGE: 'Deployment to production on GOV.UK PaaS successful :rocket:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
