name: Deploy

on:
  push:
    branches:
      - master
    paths-ignore:
    - 'bigquery/**'
    - 'documentation/**'
    - 'terraform/common/**'

env:
 DOCKERHUB_REPOSITORY: dfedigital/teaching-vacancies

jobs:
  turnstyle:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - uses: softprops/turnstyle@v1
      name: Check workflow concurrency
      with:
        poll-interval-seconds: 20
        same-branch-only: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: build docker image and deploy
    needs: turnstyle
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      name: Checkout Code

    - name: Pin Terraform version
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 0.13.4

    - name: Set environment variables
      id: set_env_vars
      run: |
        TAG=${{ github.sha }}
        echo "TAG=${TAG}" >> $GITHUB_ENV

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1

    - name: Validate secrets
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-west-2
      run: |
        gem install aws-sdk-ssm --no-document
        bin/run-in-env -t /tvs/staging -o quiet \
          && echo Data in /tvs/staging looks valid
        bin/run-in-env -t /tvs/production -o quiet \
          && echo Data in /tvs/production looks valid

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push docker image from builder target
      uses: docker/build-push-action@v2
      with:
        build-args: BUILDKIT_INLINE_CACHE=1
        cache-from: |
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
        push: true
        tags: ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
        target: builder

    - name: Build and push docker image from production target
      uses: docker/build-push-action@v2
      with:
        build-args: BUILDKIT_INLINE_CACHE=1
        cache-from: |
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
          ${{ env.DOCKERHUB_REPOSITORY }}:master
        push: true
        tags: |
          ${{ env.DOCKERHUB_REPOSITORY }}:master
          ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.TAG }}
        target: production

    - name: Trigger Deploy App Workflow for staging
      uses: benc-uk/workflow-dispatch@v1.1
      with:
        workflow: Deploy App to Environment # Workflow name
        token: ${{ secrets.PERSONAL_TOKEN }}
        inputs: '{"environment": "staging", "tag": "${{ env.TAG }}"}'

    - name: Wait for Deploy App Workflow for staging
      id: wait_for_deploy_app_staging
      uses: fountainhead/action-wait-for-check@v1.0.0
      with:
        token: ${{ secrets.PERSONAL_TOKEN }}
        checkName: Deploy app to environment # Job name within workflow
        ref: ${{ github.ref }}
        timeoutSeconds: 300
        intervalSeconds: 15

    - name: Trigger Smoke Test
      if: ${{ steps.wait_for_deploy_app_staging.outputs.conclusion == 'success' }}
      uses: benc-uk/workflow-dispatch@v1.1
      with:
        workflow: Smoke Test Manual # Workflow name
        token: ${{ secrets.PERSONAL_TOKEN }}
        inputs: '{"environment": "staging"}'

    - name: Wait for smoke test
      id: wait_for_smoke_test
      uses: fountainhead/action-wait-for-check@v1.0.0
      with:
        token: ${{ secrets.PERSONAL_TOKEN }}
        checkName: Smoke Test Manual Job # Job name within workflow
        ref: ${{ github.ref }}
        timeoutSeconds: 300
        intervalSeconds: 15

    - name: Trigger Deploy App Workflow
      if: ${{ steps.wait_for_smoke_test.outputs.conclusion == 'success' }} && github.ref == 'refs/heads/master'
      uses: benc-uk/workflow-dispatch@v1.1
      with:
        workflow: Deploy App to Environment # Workflow name
        token: ${{ secrets.PERSONAL_TOKEN }}
        inputs: '{"environment": "production", "tag": "${{ env.TAG }}"}'

    - name: Wait for Deploy App Workflow
      id: wait_for_deploy_app_production
      uses: fountainhead/action-wait-for-check@v1.0.0
      with:
        token: ${{ secrets.PERSONAL_TOKEN }}
        checkName: Deploy app to environment # Job name within workflow
        ref: ${{ github.ref }}
        timeoutSeconds: 300
        intervalSeconds: 15

    - name: Deploy monitoring
      if: ${{ steps.wait_for_deploy_app_production.outputs.conclusion == 'success' }} && github.ref == 'refs/heads/master'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_paas_user: ${{ secrets.CF_USERNAME }}
        TF_VAR_paas_password: ${{ secrets.CF_PASSWORD }}
      run: |
        export TF_VAR_paas_app_docker_image=${{ env.DOCKERHUB_REPOSITORY }}:${{ env.TAG }}
        cd terraform/monitoring
        terraform init -upgrade=true -reconfigure -input=false
        terraform apply -input=false -auto-approve

    - name: Send success message to twd_tv_dev channel
      if: ${{ steps.wait_for_deploy_app_production.outputs.conclusion == 'success' }} && github.ref == 'refs/heads/master'
      uses: rtCamp/action-slack-notify@v2.1.1
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':tada:'
        SLACK_TITLE: Deployment success
        SLACK_MESSAGE: 'Deployment of Docker tag ${{ env.TAG }} to production - successful :rocket:'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send failure message to twd_tv_dev channel
      if: ${{ steps.wait_for_deploy_app_production.outputs.conclusion == 'failure' }} && github.ref == 'refs/heads/master'
      uses: rtCamp/action-slack-notify@v2.1.1
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':cry:'
        SLACK_TITLE: Deployment failure
        SLACK_MESSAGE: 'Deployment of Docker tag ${{ env.TAG }} to production - failure'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
