name: Sync staging database

on:
  schedule:
  # The schedule is in UTC and uses cron syntax
  # * is a special character in YAML so you have to quote this string
  - cron: '0 2 * * *'

jobs:
  sync:
    name: Sync staging database from production
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install cf client
      env:
        CF_CLI_VERSION: 7.1.0
        CF_CLI_URL: https://packages.cloudfoundry.org/stable?release=linux64-binary&version=
      run: |
        curl -sL "${CF_CLI_URL}${CF_CLI_VERSION}" | sudo tar -zx -C /usr/local/bin
        cf7 version
        cf7 install-plugin conduit -f
        cf7 plugins

    - name: Install postgres client
      run: |
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        RELEASE=$(lsb_release -cs)
        echo "deb http://apt.postgresql.org/pub/repos/apt/ ${RELEASE}"-pgdg main | sudo tee  /etc/apt/sources.list.d/pgdg.list
        cat /etc/apt/sources.list.d/pgdg.list
        sudo apt-get update
        sudo apt-get install -y postgresql-client-11
        psql --version

    - name: Sync staging from production
      env:
        CF_USERNAME: ${{ secrets.CF_USERNAME }}
        CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
        CF_API_ENDPOINT: ${{ secrets.CF_API_ENDPOINT }}
        CF_ORG: ${{ secrets.CF_ORG }}
        CF_SPACE_ORIGIN: teaching-vacancies-production
        CF_SPACE_TARGET: teaching-vacancies-staging
        CF_POSTGRES_SERVICE_ORIGIN: teaching-vacancies-postgres-production
        CF_POSTGRES_SERVICE_TARGET: teaching-vacancies-postgres-staging
      run: bin/sync-db

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Upload backup to S3
      run: bin/upload-db-backup

    - name: Send success message to twd_tv_dev channel
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2.1.0
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':rocket:'
        SLACK_TITLE: DB syncing success
        SLACK_MESSAGE: 'Successful database backup and sync'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send failure message to twd_tv_dev channel
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2.1.0
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':cry:'
        SLACK_TITLE: DB syncing failure
        SLACK_MESSAGE: 'Failed database backup and sync'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
