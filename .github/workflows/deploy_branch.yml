name: Deploy

on:
  push:
    branches:
      - dev
      - staging
    paths-ignore:
    - 'bigquery/**'
    - 'documentation/**'    
    - 'terraform/common/**'
    - 'terraform/monitoring/**'

env:
 DOCKERHUB_REPOSITORY: dfedigital/teaching-vacancies
 CF_PROVIDER_VERSION: 0.12.6

jobs:
  turnstyle:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: softprops/turnstyle@v1
      name: Check workflow concurrency
      with:
        poll-interval-seconds: 20
        same-branch-only: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: build docker image and deploy
    needs: turnstyle
    runs-on: ubuntu-latest
    outputs:
      BRANCH: ${{ steps.set_env_vars.outputs.BRANCH }}
      TAG: ${{ steps.set_env_vars.outputs.TAG }}
    steps:
    - uses: actions/checkout@v2
      name: Checkout Code

    - name: Pin Terraform version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.4

    - name: Set environment variables
      id: set_env_vars
      run: |
        BRANCH=$(echo ${GITHUB_REF} | cut -d/ -f3)
        TAG=${BRANCH}-${GITHUB_SHA}-$(date '+%Y%m%d%H%M%S')
        echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        echo "TAG=${TAG}" >> $GITHUB_ENV
        echo ::set-output name=BRANCH::${BRANCH}
        echo ::set-output name=TAG::${TAG}

    - name: Set up Ruby 2.7
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7

    - name: Validate secrets
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        gem install aws-sdk-ssm --no-document
        bin/run-in-env -t "/tvs/${BRANCH}" -o quiet \
          && echo Data in "/tvs/${BRANCH}" looks valid

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push docker image from builder target
      uses: docker/build-push-action@v2
      with:
        build-args: BUILDKIT_INLINE_CACHE=1
        cache-from: |
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-${{ env.BRANCH }}
        push: true
        tags: ${{ env.DOCKERHUB_REPOSITORY }}:builder-${{ env.BRANCH }}
        target: builder

    - name: Build and push docker image from production target
      uses: docker/build-push-action@v2
      with:
        build-args: BUILDKIT_INLINE_CACHE=1
        cache-from: |
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-${{ env.BRANCH }}
          ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.BRANCH }}
        push: true
        tags: |
          ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.TAG }}
          ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.BRANCH }}
        target: production

    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_paas_user: ${{ secrets.CF_USERNAME }}
        TF_VAR_paas_password: ${{ secrets.CF_PASSWORD }}
      run: |
        export TF_VAR_paas_app_docker_image=${DOCKERHUB_REPOSITORY}:${TAG}
        terraform init -input=false terraform/app
        terraform workspace select ${BRANCH} terraform/app || terraform workspace new ${BRANCH} terraform/app
        terraform apply -var-file terraform/workspace-variables/${BRANCH}.tfvars -auto-approve -input=false terraform/app

    - name: Send success message to twd_tv_dev channel
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2.0.2
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':tada:'
        SLACK_TITLE: Deployment success
        SLACK_MESSAGE: 'Deployment of ${{ steps.set_env_vars.outputs.TAG }} to ${{ steps.set_env_vars.outputs.BRANCH }} on GOV.UK PaaS successful :rocket:'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send failure message to twd_tv_dev channel
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2.0.2
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':cry:'
        SLACK_TITLE: Deployment failure
        SLACK_MESSAGE: 'GitHub actions pipeline failed to deploy a review app for PR ${{ github.event.number }}'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
